<?xml version="1.0" encoding="utf-8" ?>

<cdsl>
    <flow id="test-flow-a" defaultStep="init" errorStep="error">
        <step id="init">
            <sayHello name="fred"/>
            <dslWithComplexModel aModelProperty="testProperty">
                <modelChild>
                    <name>testChildName</name>
                    <aList>
                        <entry>firstValue</entry>
                        <entry>secondValue</entry>
                    </aList>
                </modelChild>
            </dslWithComplexModel>
        </step>

    </flow>

    <flow id="shouldRunHelloWorldAndEndRoute" defaultStep="init" errorStep="error">
        <step id="init">
            <setState val="Alive"/>
            <sayHello name="fred"/>
            <setVar name="myVar" val="myVal"/>
            <routeTo target="end"/>
        </step>

        <step id="end">
            <endRoute/>
            <finally>
                <setState val="End"/>
            </finally>
        </step>
    </flow>



    <flow id="shouldPassOutputValues" defaultStep="init" errorStep="error">
        <step id="init">
            <injected name="injectedOne"/>

            <routeTo target="end"/>
        </step>

        <step id="end">
            <injected name="injectedTwo"/>

            <endRoute/>
            <finally>
                <setState val="End"/>
            </finally>
        </step>
    </flow>



    <flow id="shouldRaiseExceptionFlow" defaultStep="init" errorStep="error">

        <step id="init">
            <setState val="Alive"/>
            <raiseException/>
        </step>

        <step id="error">
            <setVar name="errorRaised" val="yesItWas"/>
            <finally>
                <endRoute/>
                <setState val="Error"/>
            </finally>
        </step>

        <step id="end">
            <endRoute/>
            <finally>
                <setState val="End"/>
            </finally>
        </step>
    </flow>


    <flow id="shouldRouteThroughAThenBThenAwaitAtC" defaultStep="init" errorStep="error">
        <step id="init">
            <setState val="Alive"/>
            <routeTo target="a"/>
        </step>

        <step id="a">
            <routeTo target="b"/>
        </step>

        <step id="b">
            <await at="c"/>
        </step>

        <step id="c" >
            <!--whiteList onFailure="Reject" names="message, other" /-->
            <routeTo target="end"/>
        </step>

        <step id="end">
            <endRoute/>
            <finally>
                <setState val="End"/>
            </finally>
        </step>
    </flow>

    <flow id="shouldAwaitAtB" defaultStep="init" errorStep="error">
        <step id="init">
            <setState val="Alive"/>
            <routeTo target="a"/>
        </step>

        <step id="a">
            <await at="b"/>
        </step>

        <step id="b">
            <whiteList names="message" onFailure="Route" to="end"/>
        </step>

        <step id="end">
            <endRoute/>
            <finally>
                <setState val="End"/>
            </finally>
        </step>
    </flow>


    <flow id="shouldProcessInputModelA" defaultStep="init" errorStep="error">
        <step id="init">
            <setState val="Alive"/>
            <routeTo target="reverseInputModel"/>
        </step>

        <step id="reverseInputModel">
            <reverseCustomInput outVar="myChosenVar"/>
            <routeTo target="end"/>
        </step>

        <step id="end">
            <endRoute/>
            <finally>
                <setState val="End"/>
                <!--<outCome varName="myChosenVar"/>-->
            </finally>
        </step>
    </flow>


    <flow id="shouldRunInjected" defaultStep="init" >
        <step id="init">
            <injected name="injectedOne"/>
            <routeTo target="end"/>
        </step>

        <step id="end">
            <endRoute/>
            <finally>
                <setState val="End"/>
            </finally>
        </step>
    </flow>

    <flow id="mapModelFlow" defaultStep="init" >
        <step id="init">
            <static-test-support attrOne="attrOneValue">
                    <elemOne>elemOneValue</elemOne>
            </static-test-support>
            <routeTo target="end"/>
        </step>

        <step id="end">
            <endRoute/>
            <finally>
                <setState val="End"/>
            </finally>
        </step>
    </flow>

</cdsl>